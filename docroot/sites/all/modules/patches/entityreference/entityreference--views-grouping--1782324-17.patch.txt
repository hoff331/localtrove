diff --git a/entityreference.module b/entityreference.module
index 28ccf86..b3e3d76 100644
--- a/entityreference.module
+++ b/entityreference.module
@@ -762,10 +762,16 @@ function entityreference_field_widget_settings_form($field, $instance) {
  * Implements hook_options_list().
  */
 function entityreference_options_list($field, $instance = NULL, $entity_type = NULL, $entity = NULL) {
-  if (!$options = entityreference_get_selection_handler($field, $instance, $entity_type, $entity)->getReferencableEntities()) {
+  $selection_handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);
+  if (!$options = $selection_handler->getReferencableEntities()) {
     return array();
   }
 
+  // If selection handler uses a view, let grouping come from it.
+  if (isset($selection_handler->view)) {
+    return $options;
+  }
+
   // Rebuild the array, by changing the bundle key into the bundle label.
   $target_type = $field['settings']['target_type'];
   $entity_info = entity_get_info($target_type);
diff --git a/plugins/selection/EntityReference_SelectionHandler_Views.class.php b/plugins/selection/EntityReference_SelectionHandler_Views.class.php
index 1b036a7..f069e77 100644
--- a/plugins/selection/EntityReference_SelectionHandler_Views.class.php
+++ b/plugins/selection/EntityReference_SelectionHandler_Views.class.php
@@ -105,22 +105,9 @@ class EntityReference_SelectionHandler_Views implements EntityReference_Selectio
   public function getReferencableEntities($match = NULL, $match_operator = 'CONTAINS', $limit = 0) {
     $display_name = $this->field['settings']['handler_settings']['view']['display_name'];
     $args = $this->field['settings']['handler_settings']['view']['args'];
-    $result = array();
-    if ($this->initializeView($match, $match_operator, $limit)) {
-      // Get the results.
-      $result = $this->view->execute_display($display_name, $args);
-    }
-
-    $return = array();
-    if ($result) {
-      $target_type = $this->field['settings']['target_type'];
-      $entities = entity_load($target_type, array_keys($result));
-      foreach($entities as $entity) {
-        list($id,, $bundle) = entity_extract_ids($target_type, $entity);
-        $return[$bundle][$id] = $result[$id];
-      }
-    }
-    return $return;
+    $is_valid_view = $this->initializeView($match, $match_operator, $limit);
+    // Get views results.
+    return $is_valid_view ? $this->view->execute_display($display_name, $args) : array();
   }
 
   /**
@@ -136,9 +123,14 @@ class EntityReference_SelectionHandler_Views implements EntityReference_Selectio
     $args = $this->field['settings']['handler_settings']['view']['args'];
     $result = array();
     if ($this->initializeView(NULL, 'CONTAINS', 0, $ids)) {
-      // Get the results.
+      // Get views results.
       $entities = $this->view->execute_display($display_name, $args);
-      $result = array_keys($entities);
+      // Find the referencable entities IDs.
+      array_walk_recursive($entities, function ($value, $key) use (&$result) {
+        if (is_numeric($key)) {
+          $result[] = $key;
+        }
+      });
     }
     return $result;
   }
diff --git a/views/entityreference_plugin_style.inc b/views/entityreference_plugin_style.inc
index fadaa9e..2e34dbf 100644
--- a/views/entityreference_plugin_style.inc
+++ b/views/entityreference_plugin_style.inc
@@ -45,17 +45,25 @@ class entityreference_plugin_style extends views_plugin_style {
 
     // Group the rows according to the grouping field, if specified.
     $sets = $this->render_grouping($this->view->result, $this->options['grouping']);
+
+    return $this->clean_groupings($sets);
+  }
+
+  // Clean views grouped results array.
+  function clean_groupings($sets) {
     // Grab the alias of the 'id' field added by entityreference_plugin_display.
     $id_field_alias = $this->display->handler->id_field_alias;
-
-    // @todo We don't display grouping info for now. Could be useful for select
-    // widget, though.
     $results = array();
-    foreach ($sets as $records) {
-      foreach ($records as $index => $values) {
-        $this->view->row_index = $index;
-        // Sanitize html, remove line breaks and extra whitespace.
-        $results[$values->{$id_field_alias}] = filter_xss_admin(preg_replace('/\s\s+/', ' ', str_replace("\n", '', $this->row_plugin->render($values))));
+    foreach ($sets as $key => $value) {
+      if (is_array($value)) {
+        $results[$key] = $this->clean_groupings($value);
+        if ($key == 'rows' || !$key) {
+          return $results[$key];
+        }
+      }
+      else if (is_object($value)) {
+        $this->view->row_index = $key;
+        $results[$value->{$id_field_alias}] = filter_xss_admin(preg_replace('/\s\s+/', ' ', str_replace("\n", '', $this->row_plugin->render($value))));
       }
     }
     unset($this->view->row_index);
